require("dotenv").config()
const { chromium } = require("playwright")

const { TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, CITY, STREET, HOUSE } =
  process.env

async function getInfo() {
  console.log("üåÄ Getting info...")

  const browser = await chromium.launch({ headless: true })
  const browserContext = await browser.newContext()
  const browserPage = await browserContext.newPage()

  try {
    await browserPage.goto("https://www.dtek-krem.com.ua/ua/shutdowns", {
      waitUntil: "networkidle",
    })

    const csrfTokenTag = await browserPage.waitForSelector(
      'meta[name="csrf-token"]',
      { state: "attached" }
    )
    const csrfToken = await csrfTokenTag.getAttribute("content")

    const info = await browserPage.evaluate(
      async ({ CITY, STREET, csrfToken }) => {
        const formData = new URLSearchParams()
        formData.append("method", "getHomeNum")
        formData.append("data[0][name]", "city")
        formData.append("data[0][value]", CITY)
        formData.append("data[1][name]", "street")
        formData.append("data[1][value]", STREET)
        formData.append("data[2][name]", "updateFact")
        formData.append("data[2][value]", new Date().toLocaleString("uk-UA"))

        const response = await fetch("/ua/ajax", {
          method: "POST",
          headers: {
            "x-requested-with": "XMLHttpRequest",
            "x-csrf-token": csrfToken,
          },
          body: formData,
        })
        return await response.json()
      },
      { CITY, STREET, csrfToken }
    )

    console.log("‚úÖ Getting info finished.")
    return info
  } catch (error) {
    throw Error(`‚ùå Getting info failed: ${error.message}`)
  } finally {
    await browser.close()
  }
}

function checkOutage(info) {
  console.log("üåÄ Checking power outage...")

  if (!info?.data) {
    throw Error("‚ùå Power outage info missed.")
  }

  const { sub_type, start_date, end_date, type } = info?.data?.[HOUSE] || {}
  const isOutageDetected =
    sub_type !== "" || start_date !== "" || end_date !== "" || type !== ""

  isOutageDetected
    ? console.log("üö® Power outage detected!")
    : console.log("‚ö°Ô∏è No power outage!")

  return isOutageDetected
}

async function sendNotification(info) {
  if (!TELEGRAM_BOT_TOKEN)
    throw Error("‚ùå Missing telegram bot token or chat id.")
  if (!TELEGRAM_CHAT_ID) throw Error("‚ùå Missing telegram chat id.")

  const {
    type,
    sub_type,
    start_date,
    end_date,
    sub_type_reason,
    updateTimestamp,
  } = info?.data?.[HOUSE] || {}

  const text =
    `‚ö° <b>–£–í–ê–ì–ê! –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó</b>\n\n` +
    `üè† <b>–¢–∏–ø:</b> ${type || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}\n` +
    `üìã <b>–ü—ñ–¥—Ç–∏–ø:</b> ${sub_type || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}\n` +
    `üïê <b>–ü–æ—á–∞—Ç–æ–∫:</b> ${start_date || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}\n` +
    `üïê <b>–ö—ñ–Ω–µ—Ü—å:</b> ${end_date || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}\n` +
    `‚ÑπÔ∏è <b>–ü—Ä–∏—á–∏–Ω–∞:</b> ${
      sub_type_reason ? sub_type_reason.join(", ") : "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    }\n` +
    `‚è∞ <b>–û–Ω–æ–≤–ª–µ–Ω–æ:</b> ${updateTimestamp}`

  console.log("üåÄ Sending notification...")

  try {
    const res = await fetch(
      `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          chat_id: TELEGRAM_CHAT_ID,
          text,
          parse_mode: "HTML",
        }),
      }
    )

    const data = await res.json()
    console.log("üü¢ Notification sent.", data)
  } catch (error) {
    console.log("üî¥ Notification not sent.", error.message)
  }
}

async function run() {
  const info = await getInfo()
  const isOutage = checkOutage(info)
  if (isOutage) await sendNotification(info)
}

run().catch((error) => console.error(error.message))
